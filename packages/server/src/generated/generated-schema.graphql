### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Author implements Node {
  """Other books written by the author and also stored in the database"""
  booksWritten: [ISBNDatabaseBook!]!

  """Unique identifier for the resource"""
  id: ID!
  name: String!
}

interface BookBase {
  """A 10 digit ISBN"""
  isbn10: String!

  """A new format 13 digit ISBN"""
  isbn13: String!

  """Title of the book"""
  title: String!
}

"""Date custom scalar type"""
scalar DateTime

type Entry implements Node & Timestamps {
  book: UserBook

  """Chapter relating to the note"""
  chapter: String
  createdAt: DateTime!

  """Unique identifier for the resource"""
  id: ID!

  """User supplied notes for the entry"""
  notes: String
  owner: User

  """Page the notes are referencing"""
  page: Int

  """Quoted text from the book"""
  quote: String
  updatedAt: DateTime!

  """Foreign key to the associated user book for the entry"""
  userBookId: ID!

  """Foreign key to the associated owner of the entry"""
  userId: ID!
}

"""Raw response from the ISBN Database API"""
type ISBNAPIBook {
  authors: [String!]
  date_published: String!
  dewey_decimal: String
  dimensions: String
  edition: String
  excerpt: String
  format: String
  image: String

  """A 10 digit ISBN"""
  isbn: String!

  """A new format 13 digit ISBN"""
  isbn13: String!
  langage: String
  msrp: Int
  overview: String
  pages: Int
  publisher: String
  reviews: [String!]
  subjects: [String!]
  synopsys: String

  """Title of the book"""
  title: String!
  title_long: String
}

"""A stored subset of fields from the ISBN API for a given book"""
type ISBNDatabaseBook implements BookBase & Node {
  """Unique identifier for the resource"""
  id: ID!

  """A 10 digit ISBN"""
  isbn10: String!

  """A new format 13 digit ISBN"""
  isbn13: String!

  """Title of the book"""
  title: String!
}

type Mutation {
  addToMyBooks(isbn: String!): UserBook!
  createEntry(input: NewEntryInput!): Entry!
  removeEntry(id: ID!): ID!
  removeMyBook(id: ID!): ID!
  updateEntry(input: UpdateEntryInput!): Entry!
  updateUser(user: UserInput!): User
}

input NewEntryInput {
  book: ID!
  chapter: String
  notes: String
  page: Int
  quote: String
}

interface Node {
  """Unique identifier for the resource"""
  id: ID!
}

type Query {
  allAuthors: [Author!]
  author(id: String!): Author
  entry(id: ID!): Entry
  isbnAuthor(name: String!): [ISBNAPIBook!]!
  isbnBooks(name: String!): [ISBNAPIBook!]!
  me: User
  myBooks: [UserBook!]
  myEntries: [Entry!]
  userBook(id: String!): UserBook
}

interface Timestamps {
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UpdateEntryInput {
  chapter: String
  id: ID!
  notes: String
  page: Int
  quote: String
}

type User implements Node & Timestamps {
  """A user's collection of books to take notes on"""
  books: [UserBook!]!
  createdAt: DateTime!

  """A user's stored entries"""
  entries: [Entry!]!

  """Unique identifier for the resource"""
  id: ID!

  """User's name from oAuth provider"""
  name: String

  """Unique oAuth provider"""
  sub: String!
  updatedAt: DateTime!
}

"""An augmented ISBN Book, with additional user controlled properties"""
type UserBook implements BookBase & Node & Timestamps {
  """A list of authors for a given book"""
  authors: [Author!]!
  createdAt: DateTime!

  """A user's entries on the given Book"""
  entries: [Entry!]!

  """Unique identifier for the resource"""
  id: ID!

  """A 10 digit ISBN"""
  isbn10: String!

  """A new format 13 digit ISBN"""
  isbn13: String!

  """A user's rating of a book on a scale of 1-5"""
  rating: Int

  """Synopsis of the book"""
  synopsis: String

  """Title of the book"""
  title: String!
  updatedAt: DateTime!
}

input UserInput {
  name: String
  picture: String
  sub: String
}
