### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Author implements Node {
  """Other books written by the author and also stored in the database"""
  booksWritten: [Book!]!

  """Unique identifier for the resource"""
  id: ID!
  name: String!
}

type Book implements Node {
  """A list of authors for a given book"""
  authors: [Author!]!

  """A user's entries on the given Book"""
  entries: [Entry!]!

  """Unique identifier for the resource"""
  id: ID!

  """ISBN number of the book"""
  isbn: String

  """Date of first publication"""
  publishedDate: DateTime

  """Synopsis of the book"""
  synopsis: String

  """Title of the Book"""
  title: String!
}

"""Date custom scalar type"""
scalar DateTime

type Entry implements Node {
  book: Book

  """Chapter relating to the note"""
  chapter: String

  """Database generated timestamp of entry creation"""
  createdAt: DateTime!

  """Unique identifier for the resource"""
  id: ID!

  """User supplied notes for the entry"""
  notes: String
  owner: User

  """Page the notes are referencing"""
  page: Int

  """Quoted text from the book"""
  quote: String
}

type ISBNBook {
  authors: [String!]
  date_published: String!
  dewey_decimal: String
  dimensions: String
  edition: String
  excerpt: String
  format: String
  image: String
  isbn: String!
  isbn13: String!
  langage: String
  msrp: Int
  overview: String
  pages: Int
  publisher: String
  reviews: [String!]
  subjects: [String!]
  synopsys: String
  title: String!
  title_long: String
}

type Mutation {
  addToMyBooks(isbn: String!): Book
  createEntry(input: NewEntryInput!): Entry
  removeEntry(id: ID!): ID
  removeMyBook(id: ID!): User
  updateEntry(input: UpdateEntryInput!): Entry
  updateUser(user: UserInput!): User
}

input NewEntryInput {
  book: ID!
  chapter: String
  notes: String
  page: Int
  quote: String
}

interface Node {
  """Unique identifier for the resource"""
  id: ID!
}

type Query {
  allAuthors: [Author!]
  allBooks: [Book!]
  author(id: String!): Author
  book(id: String!): Book
  entry(id: ID!): Entry
  isbnAuthor(name: String!): [ISBNBook!]!
  isbnBooks(name: String!): [ISBNBook!]!
  me: User
  myBooks: [Book!]
  myEntries: [Entry!]
}

input UpdateEntryInput {
  chapter: String
  id: ID!
  notes: String
  page: Int
  quote: String
}

type User implements Node {
  """A user's collection of books to take notes on"""
  books: [Book!]!

  """A user's stored entries"""
  entries: [Entry!]!

  """Unique identifier for the resource"""
  id: ID!

  """User's name from oAuth provider"""
  name: String

  """User's profile image from oAuth provider"""
  picture: String

  """Unique oAuth provider"""
  sub: String!
}

input UserInput {
  name: String
  picture: String
  sub: String!
}
